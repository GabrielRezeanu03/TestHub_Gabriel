{"name": "Test job titles from the basware website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Associate Support Consultant with English', 'Knowledge Management Specialist - 12 m contract', 'Solution Consultant', 'Support Consultant']", "trace": "get_job_details = ((['Knowledge Management Specialist - 12 m contract', 'Associate Support Consultant with English', 'Support Consultant..., 'basware', 'basware', 'basware', 'basware', ...], ['hybrid', 'hybrid', 'hybrid', 'hybrid', 'hybrid', 'hybrid', ...]))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_basware_title_api(get_job_details):\n        allure.dynamic.title(f\"Test job titles from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job titles from the scraper\"):\n            job_titles_scraper = sorted(scraped_jobs_data[0])\n    \n        with allure.step(\"Step 2: Get job titles from the Peviitor API\"):\n            job_titles_peviitor = sorted(peviitor_jobs_data[0])\n    \n        with allure.step(\"Step 3: Compare job titles from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_titles_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_titles_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_basware.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f476a761630>\nexpected_titles = ['Associate Support Consultant with English', 'Knowledge Management Specialist - 12 m contract', 'Solution Consultant', 'Support Consultant']\nactual_titles = ['Application Support Consultant', 'Customer Success Manager', 'Customer Support Consultant', 'Lead Database Administrator - Oracle', 'Regional Support Consultant', 'Senior HR Specialist', ...]\n\n    def check_job_titles(self, expected_titles, actual_titles):\n        missing_titles = self.get_missing_items(expected_titles, actual_titles)\n    \n        if missing_titles:\n            msg = f\"Peviitor is having extra job titles: {missing_titles}\"\n        else:\n            missing_titles = self.get_missing_items(actual_titles, expected_titles)\n            msg = f\"Peviitor is missing job titles: {missing_titles}\"\n    \n        if not expected_titles and not actual_titles:\n            msg = f\"Scraper is not grabbing any job titles\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_titles == actual_titles, msg\nE       AssertionError: Peviitor is having extra job titles: ['Associate Support Consultant with English', 'Knowledge Management Specialist - 12 m contract', 'Solution Consultant', 'Support Consultant']\n\ntests/utils.py:124: AssertionError"}, "steps": [{"name": "Step 1: Get job titles from the scraper", "status": "passed", "start": 1718255496771, "stop": 1718255496771}, {"name": "Step 2: Get job titles from the Peviitor API", "status": "passed", "start": 1718255496771, "stop": 1718255496771}, {"name": "Step 3: Compare job titles from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Associate Support Consultant with English', 'Knowledge Management Specialist - 12 m contract', 'Solution Consultant', 'Support Consultant']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_basware.py\", line 37, in test_basware_title_api\n    TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 124, in check_job_titles\n    assert expected_titles == actual_titles, msg\n"}, "attachments": [{"name": "Expected Results", "source": "9dd09a05-2bbc-4170-a1a8-19d54ffe6a62-attachment.attach"}, {"name": "Actual Results", "source": "fbd323a2-e600-4ce3-9a7c-983c80b6d7a3-attachment.attach"}], "start": 1718255496771, "stop": 1718255496772}], "attachments": [{"name": "stderr", "source": "abec1ca1-9988-4c1f-9bf8-e0584d58421e-attachment.txt", "type": "text/plain"}], "start": 1718255496771, "stop": 1718255496772, "uuid": "26387a94-0f60-4130-9beb-8055ff267cd4", "historyId": "fa9910c571b0fa1799b7ab2b91e90a61", "testCaseId": "fa9910c571b0fa1799b7ab2b91e90a61", "fullName": "Test_API_Suite.test_basware#test_basware_title_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_basware"}, {"name": "host", "value": "fv-az1790-323"}, {"name": "thread", "value": "1963-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_basware"}]}