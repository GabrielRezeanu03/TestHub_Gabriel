{"name": "Test job cities from the bbcollection website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities: [['Arad', 'Brasov', 'Bucuresti', 'Constanta', 'Cluj-Napoca', 'Craiova', 'Deva', 'Satu Mare', 'Suceava', 'Targu-Mures', 'Targoviste', 'Timisoara', 'Tulcea'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara']]", "trace": "get_job_details = ((['CONSILIER VANZARI', 'MANAGER DE PRODUS', 'ARHIVAR', 'SEF RAION', 'CONSILIER JURIDIC'], [['Arad', 'Brasov', 'Bucure..., 'https://www.bbcollection.ro/cariera-sef-raion.html', 'https://www.bbcollection.ro/cariera-consilier-juridic.html']))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_bbcollection_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities from the scraper\"):\n            job_cities_scraper = sorted(scraped_jobs_data[1])\n    \n        with allure.step(\"Step 2: Get job cities from the Peviitor API\"):\n            job_cities_peviitor = sorted(peviitor_jobs_data[1])\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor)\n\ntests/Test_API_Suite/test_bbcollection.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f3304d7ef80>\nexpected_cities = [['Arad', 'Brasov', 'Bucuresti', 'Constanta', 'Cluj-Napoca', 'Craiova', ...], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara']]\nactual_cities = [['Arad', 'Brasov', 'București', 'Constanta', 'Cluj-Napoca', 'Craiova', ...], ['București'], ['București'], ['București'], ['București', 'Cluj-Napoca', 'Timisoara']]\n\n    def check_job_cities(self, expected_cities, actual_cities):\n        missing_cities = self.get_missing_items(expected_cities, actual_cities)\n    \n        if missing_cities:\n            msg = f\"Peviitor is having extra job cities: {missing_cities}\"\n        else:\n            missing_cities = self.get_missing_items(actual_cities, expected_cities)\n            msg = f\"Peviitor is missing job cities: {missing_cities}\"\n    \n        if not expected_cities and not actual_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_cities == actual_cities, msg\nE       AssertionError: Peviitor is having extra job cities: [['Arad', 'Brasov', 'Bucuresti', 'Constanta', 'Cluj-Napoca', 'Craiova', 'Deva', 'Satu Mare', 'Suceava', 'Targu-Mures', 'Targoviste', 'Timisoara', 'Tulcea'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara']]\n\ntests/utils.py:114: AssertionError"}, "steps": [{"name": "Step 1: Get job cities from the scraper", "status": "passed", "start": 1710133853075, "stop": 1710133853075}, {"name": "Step 2: Get job cities from the Peviitor API", "status": "passed", "start": 1710133853075, "stop": 1710133853075}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities: [['Arad', 'Brasov', 'Bucuresti', 'Constanta', 'Cluj-Napoca', 'Craiova', 'Deva', 'Satu Mare', 'Suceava', 'Targu-Mures', 'Targoviste', 'Timisoara', 'Tulcea'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara']]\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_bbcollection.py\", line 53, in test_bbcollection_city_api\n    TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 114, in check_job_cities\n    assert expected_cities == actual_cities, msg\n"}, "attachments": [{"name": "Expected Results", "source": "9261f929-208e-42a4-b9ab-cb654a76294f-attachment.attach"}, {"name": "Actual Results", "source": "1f3dc67a-bee5-4e83-b6a1-9d1b034cee7d-attachment.attach"}], "start": 1710133853075, "stop": 1710133853075}], "start": 1710133853074, "stop": 1710133853075, "uuid": "6481efef-5be9-4d53-8c99-09c8c0cb79a4", "historyId": "87a357e32229907c7a83fc39bb70719b", "testCaseId": "87a357e32229907c7a83fc39bb70719b", "fullName": "Test_API_Suite.test_bbcollection#test_bbcollection_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_bbcollection"}, {"name": "host", "value": "fv-az1248-353"}, {"name": "thread", "value": "2167-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_bbcollection"}]}