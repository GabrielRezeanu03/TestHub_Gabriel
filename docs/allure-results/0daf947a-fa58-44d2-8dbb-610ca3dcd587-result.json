{"name": "Test job titles from the artvertising website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Asistent Marketing magazin online', 'Job Brand Manager', 'Job Copywriter', 'Job Digital Marketing Specialist', 'Job Specialist Comunicare', 'Job Specialist Marketing Content', 'Senior Graphic Designer Iasi']", "trace": "get_job_details = ((['Job Brand Manager', 'Job Specialist Comunicare', 'Job Specialist Marketing Content', 'Job Copywriter', 'Senior Gra...ner-iasi', 'https://www.artvertising.com.ro/cariere/digital-marketing-performance-specialist', ...]), ([], [], [], []))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_artvertising_title_api(get_job_details):\n        allure.dynamic.title(f\"Test job titles from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job titles from the scraper\"):\n            job_titles_scraper = sorted(scraped_jobs_data[0])\n    \n        with allure.step(\"Step 2: Get job titles from the Peviitor API\"):\n            job_titles_peviitor = sorted(peviitor_jobs_data[0])\n    \n        with allure.step(\"Step 3: Compare job titles from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_titles_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_titles_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_artvertising.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f682fa65db0>\nexpected_titles = ['Asistent Marketing magazin online', 'Job Brand Manager', 'Job Copywriter', 'Job Digital Marketing Specialist', 'Job Specialist Comunicare', 'Job Specialist Marketing Content', ...]\nactual_titles = []\n\n    def check_job_titles(self, expected_titles, actual_titles):\n        missing_titles = self.get_missing_items(expected_titles, actual_titles)\n    \n        if missing_titles:\n            msg = f\"Peviitor is having extra job titles: {missing_titles}\"\n        else:\n            missing_titles = self.get_missing_items(actual_titles, expected_titles)\n            msg = f\"Peviitor is missing job titles: {missing_titles}\"\n    \n        if not expected_titles and not actual_titles:\n            msg = f\"Scraper is not grabbing any job titles\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_titles == actual_titles, msg\nE       AssertionError: Peviitor is having extra job titles: ['Asistent Marketing magazin online', 'Job Brand Manager', 'Job Copywriter', 'Job Digital Marketing Specialist', 'Job Specialist Comunicare', 'Job Specialist Marketing Content', 'Senior Graphic Designer Iasi']\n\ntests/utils.py:96: AssertionError"}, "steps": [{"name": "Step 1: Get job titles from the scraper", "status": "passed", "start": 1707250222265, "stop": 1707250222265}, {"name": "Step 2: Get job titles from the Peviitor API", "status": "passed", "start": 1707250222265, "stop": 1707250222265}, {"name": "Step 3: Compare job titles from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Asistent Marketing magazin online', 'Job Brand Manager', 'Job Copywriter', 'Job Digital Marketing Specialist', 'Job Specialist Comunicare', 'Job Specialist Marketing Content', 'Senior Graphic Designer Iasi']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_artvertising.py\", line 36, in test_artvertising_title_api\n    TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 96, in check_job_titles\n    assert expected_titles == actual_titles, msg\n"}, "attachments": [{"name": "Expected Results", "source": "f7f05c05-9902-4e8e-ac6e-2c5d39862167-attachment.attach"}, {"name": "Actual Results", "source": "2e0bc1c6-8d8f-496e-898f-3aae11e66817-attachment.attach"}], "start": 1707250222265, "stop": 1707250222266}], "start": 1707250222265, "stop": 1707250222266, "uuid": "1e6c781f-88bd-4ed5-909c-2a238113c0ed", "historyId": "ce91c19228213f2ae6cd96450074d2bc", "testCaseId": "ce91c19228213f2ae6cd96450074d2bc", "fullName": "Test_API_Suite.test_artvertising#test_artvertising_title_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_artvertising"}, {"name": "host", "value": "fv-az1539-592"}, {"name": "thread", "value": "2137-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_artvertising"}]}