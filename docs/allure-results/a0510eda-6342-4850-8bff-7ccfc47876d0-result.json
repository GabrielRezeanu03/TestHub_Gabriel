{"name": "Test job cities from the titanmachinery website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities for the following job titles: ['Tehnician service - Alexandria', 'Technician Service - Punct de lucru Brăila', 'Junior Sales Agent - Utilaje agricole - Constanța', 'Precision Farming Technician - Brăila']", "trace": "get_job_details = ((['Junior Sales Agent - Utilaje agricole - Slobozia', 'Junior Sales Agent - Utilaje agricole - Roman', 'Tehnician ser...y', 'titanmachinery', 'titanmachinery', ...], ['on-site', 'on-site', 'on-site', 'on-site', 'on-site', 'on-site', ...]))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_titanmachinery_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities and titles from the scraper\"):\n            job_cities_scraper = scraped_jobs_data[1]\n            job_titles_scraper = scraped_jobs_data[0]\n    \n        with allure.step(\"Step 2: Get job cities and titles from the Peviitor API\"):\n            job_cities_peviitor = peviitor_jobs_data[1]\n            job_titles_peviitor = peviitor_jobs_data[0]\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_titanmachinery.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7efc7e723880>\nexpected_cities = [['Alexandria'], ['Alexandria'], ['Alexandria'], ['Alexandria'], ['Alexandria'], ['Alexandria'], ...]\nactual_cities = [['Alexandria'], ['Alexandria'], ['Alexandria'], ['Alexandria'], ['Alexandria'], ['Alexandria'], ...]\njob_titles_scraper = ['Junior Sales Agent - Utilaje agricole - Slobozia', 'Junior Sales Agent - Utilaje agricole - Roman', 'Tehnician servi...ent - Echipamente agricole - CLUJ', 'Gestionar depozit - Bârlad', 'Technician Service - Punct de lucru Constanța', ...]\napi_job_titles = ['Junior Sales Agent - Utilaje agricole - Slobozia', 'Junior Sales Agent - Utilaje agricole - Roman', 'Tehnician servi...ent - Echipamente agricole - CLUJ', 'Gestionar depozit - Bârlad', 'Technician Service - Punct de lucru Constanța', ...]\n\n    def check_job_cities(self, expected_cities, actual_cities, job_titles_scraper, api_job_titles):\n        if not expected_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        msg = \"An unknown error occurred\"\n    \n        # Check jobs from scraper against the peviitor api\n        scraper_actual_cities, scraper_job_titles = self.get_different_items(expected_cities, actual_cities, job_titles_scraper)\n    \n        if scraper_actual_cities:\n            msg = f\"Peviitor is missing job cities for the following job titles: {scraper_job_titles}\"\n            allure.step(msg)\n            raise AssertionError(msg)\n        else:\n            # Check jobs from peviitor against the scraper response\n            peviitor_actual_cities, peviitor_job_titles = self.get_different_items(actual_cities, expected_cities, api_job_titles)\n            if peviitor_actual_cities:\n                msg = f\"Peviitor is having extra job cities for the following job titles: {peviitor_job_titles}\"\n                allure.step(msg)\n>               raise AssertionError(msg)\nE               AssertionError: Peviitor is having extra job cities for the following job titles: ['Tehnician service - Alexandria', 'Technician Service - Punct de lucru Brăila', 'Junior Sales Agent - Utilaje agricole - Constanța', 'Precision Farming Technician - Brăila']\n\ntests/utils.py:148: AssertionError"}, "steps": [{"name": "Step 1: Get job cities and titles from the scraper", "status": "passed", "start": 1712985346278, "stop": 1712985346278}, {"name": "Step 2: Get job cities and titles from the Peviitor API", "status": "passed", "start": 1712985346278, "stop": 1712985346278}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities for the following job titles: ['Tehnician service - Alexandria', 'Technician Service - Punct de lucru Brăila', 'Junior Sales Agent - Utilaje agricole - Constanța', 'Precision Farming Technician - Brăila']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_titanmachinery.py\", line 56, in test_titanmachinery_city_api\n    TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 148, in check_job_cities\n    raise AssertionError(msg)\n"}, "attachments": [{"name": "Expected Results", "source": "848cb521-6940-4d8e-8805-cff1746bdf28-attachment.attach"}, {"name": "Actual Results", "source": "1cd0f0a1-5039-4a1f-adc6-8978c51bdef3-attachment.attach"}], "start": 1712985346279, "stop": 1712985346279}], "start": 1712985346278, "stop": 1712985346279, "uuid": "7b432988-ee41-4b7d-b3a7-b313dae50918", "historyId": "353f380aa8574bf334eaf49d5e21d2be", "testCaseId": "353f380aa8574bf334eaf49d5e21d2be", "fullName": "Test_API_Suite.test_titanmachinery#test_titanmachinery_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_titanmachinery"}, {"name": "host", "value": "fv-az1114-91"}, {"name": "thread", "value": "2167-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_titanmachinery"}]}