{"name": "Test job cities from the vetro website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities for the following job titles: ['MEDIC VETERINAR', 'MEDIC VETERINAR', 'Key Account Manager, divizia Ferme', 'Reprezentant medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant tehnic și promovare', 'Reprezentant Medical Veterinar']", "trace": "get_job_details = ((['Key Account Manager, divizia Ferme', 'Reprezentant medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezen...UTIONS S.A. ', 'VETRO SOLUTIONS S.A. ', ...], ['on-site', 'on-site', 'on-site', 'on-site', 'on-site', 'on-site', ...]))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_vetro_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities and titles from the scraper\"):\n            job_cities_scraper = scraped_jobs_data[1]\n            job_titles_scraper = scraped_jobs_data[0]\n    \n        with allure.step(\"Step 2: Get job cities and titles from the Peviitor API\"):\n            job_cities_peviitor = peviitor_jobs_data[1]\n            job_titles_peviitor = peviitor_jobs_data[0]\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_vetro.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7fcd645fb3d0>\nexpected_cities = [['Cluj-Napoca', 'Bistrita-Nasaud', 'Mures', 'Sibiu,'], ['Cluj-Napoca', 'Zalau', 'Satu Mare'], ['Mures', 'Alba', 'Harg...va', 'Slatina', 'Ramnicu Valcea'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara'], ['Cluj-Napoca', 'Bistrita', 'Maramures']]\nactual_cities = [['IASI'], ['BUCURESTI'], ['CLUJ-NAPOCA'], ['BUCURESTI'], ['CRAIOVA'], ['TARGU MURES'], ...]\njob_titles_scraper = ['Key Account Manager, divizia Ferme', 'Reprezentant medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant tehnic și promovare', 'Reprezentant Medical Veterinar']\napi_job_titles = ['MEDIC VETERINAR', 'MEDIC VETERINAR', 'MEDIC VETERINAR', 'MEDIC VETERINAR', 'MEDIC VETERINAR', 'MEDIC VETERINAR', ...]\n\n    def check_job_cities(self, expected_cities, actual_cities, job_titles_scraper, api_job_titles):\n        if not expected_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        msg = \"An unknown error occurred\"\n    \n        # Check jobs from scraper against the peviitor api\n        scraper_actual_cities, scraper_job_titles = self.get_different_items(expected_cities, actual_cities, job_titles_scraper)\n    \n        if scraper_actual_cities:\n            msg = f\"Peviitor is missing job cities for the following job titles: {scraper_job_titles}\"\n            allure.step(msg)\n            raise AssertionError(msg)\n        else:\n            # Check jobs from peviitor against the scraper response\n            peviitor_actual_cities, peviitor_job_titles = self.get_different_items(actual_cities, expected_cities, api_job_titles)\n            if peviitor_actual_cities:\n                msg = f\"Peviitor is having extra job cities for the following job titles: {peviitor_job_titles}\"\n                allure.step(msg)\n>               raise AssertionError(msg)\nE               AssertionError: Peviitor is having extra job cities for the following job titles: ['MEDIC VETERINAR', 'MEDIC VETERINAR', 'Key Account Manager, divizia Ferme', 'Reprezentant medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant tehnic și promovare', 'Reprezentant Medical Veterinar']\n\ntests/utils.py:148: AssertionError"}, "steps": [{"name": "Step 1: Get job cities and titles from the scraper", "status": "passed", "start": 1719378773318, "stop": 1719378773318}, {"name": "Step 2: Get job cities and titles from the Peviitor API", "status": "passed", "start": 1719378773318, "stop": 1719378773318}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities for the following job titles: ['MEDIC VETERINAR', 'MEDIC VETERINAR', 'Key Account Manager, divizia Ferme', 'Reprezentant medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant Medical Veterinar', 'Reprezentant tehnic și promovare', 'Reprezentant Medical Veterinar']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_vetro.py\", line 56, in test_vetro_city_api\n    TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 148, in check_job_cities\n    raise AssertionError(msg)\n"}, "attachments": [{"name": "Expected Results", "source": "5c8fbca4-d9f7-4c54-8b48-e7a792512f57-attachment.attach"}, {"name": "Actual Results", "source": "6154ba9c-b0c9-42f0-8933-ed950e15e6de-attachment.attach"}], "start": 1719378773318, "stop": 1719378773318}], "start": 1719378773317, "stop": 1719378773318, "uuid": "033752de-12d6-408d-9c85-4fa1e9808e80", "historyId": "8eea64d014c60aea8f1d10876a2c3d40", "testCaseId": "8eea64d014c60aea8f1d10876a2c3d40", "fullName": "Test_API_Suite.test_vetro#test_vetro_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_vetro"}, {"name": "host", "value": "fv-az2033-261"}, {"name": "thread", "value": "2195-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_vetro"}]}