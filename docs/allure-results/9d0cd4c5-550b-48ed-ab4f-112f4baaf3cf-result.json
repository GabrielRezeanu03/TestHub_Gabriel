{"name": "Test job titles from the dualit website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Android Developer', 'Backend Java Developer', 'Frontend Developer', 'Frontend Developer With Angular', 'Integration Design Manager', 'Java Developer', 'Mid Senior Ios Developer', 'Net Developer', 'Python With Node Js Backend Developer', 'Qa Manual Engineer', 'React Native Developer', 'Scala Developer', 'Senior Ui Developer', 'Solution Architect', 'Ui/Ux Designer']", "trace": "get_job_details = ((['Frontend Developer', 'Java Developer', 'Python With Node Js Backend Developer', 'Backend Java Developer', 'Ui/Ux D...native-developer/', ...], ['remote', 'remote', 'remote', 'remote', 'remote', 'remote', ...]), ([], [], [], [], [], []))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_dualit_title_api(get_job_details):\n        allure.dynamic.title(f\"Test job titles from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job titles from the scraper\"):\n            job_titles_scraper = sorted(scraped_jobs_data[0])\n    \n        with allure.step(\"Step 2: Get job titles from the Peviitor API\"):\n            job_titles_peviitor = sorted(peviitor_jobs_data[0])\n    \n        with allure.step(\"Step 3: Compare job titles from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_titles_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_titles_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_dualit.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f6a7e3dc430>\nexpected_titles = ['Android Developer', 'Backend Java Developer', 'Frontend Developer', 'Frontend Developer With Angular', 'Integration Design Manager', 'Java Developer', ...]\nactual_titles = []\n\n    def check_job_titles(self, expected_titles, actual_titles):\n        missing_titles = self.get_missing_items(expected_titles, actual_titles)\n    \n        if missing_titles:\n            msg = f\"Peviitor is having extra job titles: {missing_titles}\"\n        else:\n            missing_titles = self.get_missing_items(actual_titles, expected_titles)\n            msg = f\"Peviitor is missing job titles: {missing_titles}\"\n    \n        if not expected_titles and not actual_titles:\n            msg = f\"Scraper is not grabbing any job titles\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_titles == actual_titles, msg\nE       AssertionError: Peviitor is having extra job titles: ['Android Developer', 'Backend Java Developer', 'Frontend Developer', 'Frontend Developer With Angular', 'Integration Design Manager', 'Java Developer', 'Mid Senior Ios Developer', 'Net Developer', 'Python With Node Js Backend Developer', 'Qa Manual Engineer', 'React Native Developer', 'Scala Developer', 'Senior Ui Developer', 'Solution Architect', 'Ui/Ux Designer']\n\ntests/utils.py:124: AssertionError"}, "steps": [{"name": "Step 1: Get job titles from the scraper", "status": "passed", "start": 1718044841383, "stop": 1718044841383}, {"name": "Step 2: Get job titles from the Peviitor API", "status": "passed", "start": 1718044841383, "stop": 1718044841383}, {"name": "Step 3: Compare job titles from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Android Developer', 'Backend Java Developer', 'Frontend Developer', 'Frontend Developer With Angular', 'Integration Design Manager', 'Java Developer', 'Mid Senior Ios Developer', 'Net Developer', 'Python With Node Js Backend Developer', 'Qa Manual Engineer', 'React Native Developer', 'Scala Developer', 'Senior Ui Developer', 'Solution Architect', 'Ui/Ux Designer']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_dualit.py\", line 37, in test_dualit_title_api\n    TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 124, in check_job_titles\n    assert expected_titles == actual_titles, msg\n"}, "attachments": [{"name": "Expected Results", "source": "1bcef157-7a96-4a74-8e0e-a7fdcd188844-attachment.attach"}, {"name": "Actual Results", "source": "ea1aefc5-1ffc-43c7-a85a-b3aef8ac4310-attachment.attach"}], "start": 1718044841383, "stop": 1718044841383}], "start": 1718044841383, "stop": 1718044841383, "uuid": "e2b22320-8018-47fd-a38a-c9c7803236a9", "historyId": "5621eb66fbdfc647550eead7b9073b45", "testCaseId": "5621eb66fbdfc647550eead7b9073b45", "fullName": "Test_API_Suite.test_dualit#test_dualit_title_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_dualit"}, {"name": "host", "value": "fv-az886-53"}, {"name": "thread", "value": "2155-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_dualit"}]}