{"name": "Test job countries from the bioclinica website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is missing job countries for the following job titles: ['Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Biolog', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Consilier juridic', 'Departament IT', 'Manager zonal', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic specialist/primar anatomie patologică', 'Medic specialist/primar medicină de laborator - Hematologie', 'Medic specialist/primar medicină de laborator - Microbiologie', 'Registrator medical', 'Registrator medical', 'Reprezentant medical', 'Reprezentant medical', 'Reprezentant medical']", "trace": "get_job_details = ((['Asistent medical de laborator', 'Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de labor..., ['https://www.anofm.ro/lmvw.html?agentie=ANOFM&categ=3&subcateg=1&id_lmv=2499744'], ['BIOCLINICA SRL'], ['on-site']))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_bioclinica_country_api(get_job_details):\n        allure.dynamic.title(f\"Test job countries from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job countries and titles from the scraper\"):\n            job_countries_scraper = scraped_jobs_data[2]\n            job_titles_scraper = scraped_jobs_data[0]\n    \n        with allure.step(\"Step 2: Get job countries and titles from the Peviitor API\"):\n            job_countries_peviitor = peviitor_jobs_data[2]\n            job_titles_peviitor = peviitor_jobs_data[0]\n    \n        with allure.step(\"Step 3: Compare job countries from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_countries_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_countries_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_countries(job_countries_scraper, job_countries_peviitor, job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_bioclinica.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7ffa975e4d30>\nexpected_countries = ['Romania', 'Romania', 'Romania', 'Romania', 'Romania', 'Romania', ...]\nactual_countries = ['Romania']\njob_titles_scraper = ['Asistent medical de laborator', 'Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', ...]\napi_job_titles = ['ASISTENT MEDICAL GENERALIST']\n\n    def check_job_countries(self, expected_countries, actual_countries, job_titles_scraper, api_job_titles):\n        if not expected_countries:\n            msg = f\"Scraper is not grabbing any job countries\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        msg = \"An unknown error occured\"\n    \n        # Check job countries from scraper against the peviitor api\n        scraper_actual_countries, scraper_job_titles = self.get_different_items(expected_countries, actual_countries, job_titles_scraper)\n    \n        if scraper_actual_countries:\n            msg = f\"Peviitor is missing job countries for the following job titles: {scraper_job_titles}\"\n            allure.step(msg)\n>           raise AssertionError(msg)\nE           AssertionError: Peviitor is missing job countries for the following job titles: ['Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Biolog', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Consilier juridic', 'Departament IT', 'Manager zonal', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic specialist/primar anatomie patologică', 'Medic specialist/primar medicină de laborator - Hematologie', 'Medic specialist/primar medicină de laborator - Microbiologie', 'Registrator medical', 'Registrator medical', 'Reprezentant medical', 'Reprezentant medical', 'Reprezentant medical']\n\ntests/utils.py:168: AssertionError"}, "steps": [{"name": "Step 1: Get job countries and titles from the scraper", "status": "passed", "start": 1719205898614, "stop": 1719205898614}, {"name": "Step 2: Get job countries and titles from the Peviitor API", "status": "passed", "start": 1719205898614, "stop": 1719205898614}, {"name": "Step 3: Compare job countries from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is missing job countries for the following job titles: ['Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Biolog', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Consilier juridic', 'Departament IT', 'Manager zonal', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic specialist/primar anatomie patologică', 'Medic specialist/primar medicină de laborator - Hematologie', 'Medic specialist/primar medicină de laborator - Microbiologie', 'Registrator medical', 'Registrator medical', 'Reprezentant medical', 'Reprezentant medical', 'Reprezentant medical']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_bioclinica.py\", line 75, in test_bioclinica_country_api\n    TestUtils().check_job_countries(job_countries_scraper, job_countries_peviitor, job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 168, in check_job_countries\n    raise AssertionError(msg)\n"}, "attachments": [{"name": "Expected Results", "source": "5f7156eb-11e0-474d-95a7-fb8211ac5dd3-attachment.attach"}, {"name": "Actual Results", "source": "e9eac7e6-cc71-4804-8cd1-20f129a5ffb3-attachment.attach"}], "start": 1719205898614, "stop": 1719205898614}], "start": 1719205898614, "stop": 1719205898614, "uuid": "364a25e0-2810-40d2-8275-66f604b7746c", "historyId": "ba485289333f4c2826cbace5f61340b5", "testCaseId": "ba485289333f4c2826cbace5f61340b5", "fullName": "Test_API_Suite.test_bioclinica#test_bioclinica_country_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_bioclinica"}, {"name": "host", "value": "fv-az1207-73"}, {"name": "thread", "value": "2164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_bioclinica"}]}