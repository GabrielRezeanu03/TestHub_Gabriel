{"name": "Test job cities from the bioclinica website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is missing job cities for the following job titles: ['Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Biolog', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Consilier juridic', 'Departament IT', 'Manager zonal', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic specialist/primar anatomie patologică', 'Medic specialist/primar medicină de laborator - Hematologie', 'Medic specialist/primar medicină de laborator - Microbiologie', 'Registrator medical', 'Registrator medical', 'Reprezentant medical', 'Reprezentant medical', 'Reprezentant medical']", "trace": "get_job_details = ((['Asistent medical de laborator', 'Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de labor..., ['https://www.anofm.ro/lmvw.html?agentie=ANOFM&categ=3&subcateg=1&id_lmv=2499744'], ['BIOCLINICA SRL'], ['on-site']))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_bioclinica_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities and titles from the scraper\"):\n            job_cities_scraper = scraped_jobs_data[1]\n            job_titles_scraper = scraped_jobs_data[0]\n    \n        with allure.step(\"Step 2: Get job cities and titles from the Peviitor API\"):\n            job_cities_peviitor = peviitor_jobs_data[1]\n            job_titles_peviitor = peviitor_jobs_data[0]\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_bioclinica.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f99b06bf310>\nexpected_cities = [['Bucuresti'], ['Sibiu'], ['Timisoara'], ['Bucuresti'], ['Petrosani'], ['Constanta'], ...]\nactual_cities = [['TARGU JIU']]\njob_titles_scraper = ['Asistent medical de laborator', 'Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', ...]\napi_job_titles = ['ASISTENT MEDICAL GENERALIST']\n\n    def check_job_cities(self, expected_cities, actual_cities, job_titles_scraper, api_job_titles):\n        if not expected_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        msg = \"An unknown error occurred\"\n    \n        # Check jobs from scraper against the peviitor api\n        scraper_actual_cities, scraper_job_titles = self.get_different_items(expected_cities, actual_cities, job_titles_scraper)\n    \n        if scraper_actual_cities:\n            msg = f\"Peviitor is missing job cities for the following job titles: {scraper_job_titles}\"\n            allure.step(msg)\n>           raise AssertionError(msg)\nE           AssertionError: Peviitor is missing job cities for the following job titles: ['Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Biolog', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Consilier juridic', 'Departament IT', 'Manager zonal', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic specialist/primar anatomie patologică', 'Medic specialist/primar medicină de laborator - Hematologie', 'Medic specialist/primar medicină de laborator - Microbiologie', 'Registrator medical', 'Registrator medical', 'Reprezentant medical', 'Reprezentant medical', 'Reprezentant medical']\n\ntests/utils.py:141: AssertionError"}, "steps": [{"name": "Step 1: Get job cities and titles from the scraper", "status": "passed", "start": 1719292275555, "stop": 1719292275555}, {"name": "Step 2: Get job cities and titles from the Peviitor API", "status": "passed", "start": 1719292275555, "stop": 1719292275555}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is missing job cities for the following job titles: ['Asistent medical de laborator', 'Asistent medical de laborator/Tehnician de laborator clinic', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Asistent medical generalist', 'Biolog', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Biolog/Chimist/Biochimist', 'Consilier juridic', 'Departament IT', 'Manager zonal', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic medicină de laborator', 'Medic specialist/primar anatomie patologică', 'Medic specialist/primar medicină de laborator - Hematologie', 'Medic specialist/primar medicină de laborator - Microbiologie', 'Registrator medical', 'Registrator medical', 'Reprezentant medical', 'Reprezentant medical', 'Reprezentant medical']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_bioclinica.py\", line 56, in test_bioclinica_city_api\n    TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 141, in check_job_cities\n    raise AssertionError(msg)\n"}, "attachments": [{"name": "Expected Results", "source": "f16fa71a-05dd-4db0-8ba2-d35d9bb9ea24-attachment.attach"}, {"name": "Actual Results", "source": "10583a8b-897c-4b26-865f-b1a24012a7ff-attachment.attach"}], "start": 1719292275555, "stop": 1719292275555}], "start": 1719292275554, "stop": 1719292275555, "uuid": "bcbfd0e6-70e2-4581-95e3-c90ef851b510", "historyId": "0459a815c6c3192ff8356892d93845c6", "testCaseId": "0459a815c6c3192ff8356892d93845c6", "fullName": "Test_API_Suite.test_bioclinica#test_bioclinica_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_bioclinica"}, {"name": "host", "value": "fv-az913-223"}, {"name": "thread", "value": "2220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_bioclinica"}]}