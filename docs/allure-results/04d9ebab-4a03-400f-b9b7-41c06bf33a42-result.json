{"name": "Test job cities from the carturesti website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities: [['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara'], ['Bucuresti', 'Iasi', 'Cluj-Napoca', 'Craiova', 'Drobeta-Turnu Severin', 'Targu Jiu', 'Arad', 'Oradea', 'Pitesti', 'Timisoara', 'Zalau', 'Targu-Mures'], ['Bucuresti', 'Ramnicu Valcea', 'Targu Jiu']]", "trace": "get_job_details = ((['Librar', 'Operator depozit (manipulant, picker)', 'Manager librărie', 'Coordonator echipă administrare personal și...nator-echipa-administrare-personal-si-salarizare', 'https://carturesti.ro/info/responsabil-tehnic-regional-national']))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_carturesti_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities from the scraper\"):\n            job_cities_scraper = sorted(scraped_jobs_data[1])\n    \n        with allure.step(\"Step 2: Get job cities from the Peviitor API\"):\n            job_cities_peviitor = sorted(peviitor_jobs_data[1])\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor)\n\ntests/Test_API_Suite/test_carturesti.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f24f9985ff0>\nexpected_cities = [['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara'], ['Bucuresti', 'Iasi', 'Cluj-Napoca', 'Craiova', 'Drobeta-Turnu Severin', 'Targu Jiu', ...], ['Bucuresti', 'Ramnicu Valcea', 'Targu Jiu']]\nactual_cities = [['București'], ['București'], ['București', 'Cluj-Napoca', 'Timisoara'], ['București', 'Iasi', 'Cluj-Napoca', 'Craiova', 'Drobeta-Turnu Severin', 'Targu Jiu', ...], ['București', 'Ramnicu Valcea', 'Targu Jiu']]\n\n    def check_job_cities(self, expected_cities, actual_cities):\n        missing_cities = self.get_missing_items(expected_cities, actual_cities)\n    \n        if missing_cities:\n            msg = f\"Peviitor is having extra job cities: {missing_cities}\"\n        else:\n            missing_cities = self.get_missing_items(actual_cities, expected_cities)\n            msg = f\"Peviitor is missing job cities: {missing_cities}\"\n    \n        if not expected_cities and not actual_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_cities == actual_cities, msg\nE       AssertionError: Peviitor is having extra job cities: [['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara'], ['Bucuresti', 'Iasi', 'Cluj-Napoca', 'Craiova', 'Drobeta-Turnu Severin', 'Targu Jiu', 'Arad', 'Oradea', 'Pitesti', 'Timisoara', 'Zalau', 'Targu-Mures'], ['Bucuresti', 'Ramnicu Valcea', 'Targu Jiu']]\n\ntests/utils.py:114: AssertionError"}, "steps": [{"name": "Step 1: Get job cities from the scraper", "status": "passed", "start": 1707973825072, "stop": 1707973825072}, {"name": "Step 2: Get job cities from the Peviitor API", "status": "passed", "start": 1707973825072, "stop": 1707973825072}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities: [['Bucuresti'], ['Bucuresti'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara'], ['Bucuresti', 'Iasi', 'Cluj-Napoca', 'Craiova', 'Drobeta-Turnu Severin', 'Targu Jiu', 'Arad', 'Oradea', 'Pitesti', 'Timisoara', 'Zalau', 'Targu-Mures'], ['Bucuresti', 'Ramnicu Valcea', 'Targu Jiu']]\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_carturesti.py\", line 53, in test_carturesti_city_api\n    TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 114, in check_job_cities\n    assert expected_cities == actual_cities, msg\n"}, "attachments": [{"name": "Expected Results", "source": "4e59e73d-4604-4627-8e3d-2ddc61791d6b-attachment.attach"}, {"name": "Actual Results", "source": "0627ca8b-d4f4-458c-a1de-81ab863dbb3e-attachment.attach"}], "start": 1707973825072, "stop": 1707973825072}], "start": 1707973825072, "stop": 1707973825072, "uuid": "0122ee1b-fdd5-4841-813a-2454235deaca", "historyId": "282ce9b0353e17d597eec5760340dc32", "testCaseId": "282ce9b0353e17d597eec5760340dc32", "fullName": "Test_API_Suite.test_carturesti#test_carturesti_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_carturesti"}, {"name": "host", "value": "fv-az974-238"}, {"name": "thread", "value": "2158-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_carturesti"}]}