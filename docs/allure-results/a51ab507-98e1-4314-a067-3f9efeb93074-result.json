{"name": "test_scrapers_title[sephoraScraper]", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is missing the following job titles: ['Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova']\n  \n  \nassert ['Beauty Advi... - VIVO CLUJ'] == ['Beauty Advi... - VIVO CLUJ']\n  At index 2 diff: 'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova' != 'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti'\n  Full diff:\n    [\n     'Beauty Adviser Full Time (8h/zi) - Palas, Iasi',\n     'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti',\n  -  'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti',\n  ?                                      ^  ^ ----------  ^^\n  +  'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova',\n  ?                                      ^^^^^  ^^^   ^^^^^ +++\n     'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES',\n     'STORE MANAGER - VIVO CLUJ',\n    ]", "trace": "self = <test_api.TestScrapers object at 0x7f5349114220>\nsetup_tests = <test_api.SetupTests object at 0x7f5348dc4250>\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_scrapers_title(self, setup_tests):\n        print(f\"Validate job titles from the company website against Peviitor API Response\\n\")\n    \n        print(\"Step 1: Get job titles from the scraper\")\n        job_titles_scraper = sorted(setup_tests.scraped_jobs_data[0])\n    \n        print(\"Step 2: Get job titles from the Peviitor API\")\n        job_titles_peviitor = sorted(setup_tests.peviitor_jobs_data[0])\n    \n        missing_job_titles = []\n        # Itterate over job titles and if not present on peviitor add to missing job title list\n        for job_title in job_titles_scraper:\n            if job_title not in job_titles_peviitor:\n                missing_job_titles.append(job_title)\n    \n        print(\"Step 3: Compare of job titles from scraper response against Peviitor API Response\\n\")\n        # If the missing job list is empty it might mean there are more jobs on peviitor than needed\n        if missing_job_titles == []:\n            missing_job_titles_peviitor = []\n            for job_title in job_titles_peviitor:\n                if job_title not in job_titles_scraper:\n                    missing_job_titles_peviitor.append(job_title)\n    \n            # If there are way too many jobs titles only list a couple of them\n            if len(missing_job_titles_peviitor) > 20:\n                missing_job_titles_peviitor = f\"{missing_job_titles_peviitor[:5]} and many more\"\n    \n            print(f\"Expected Results: {job_titles_scraper}\\n\")\n            print(f\"Actual Results: {job_titles_peviitor}\")\n            assert job_titles_scraper == job_titles_peviitor, f\"Peviitor is having the following extra jobs titles: {missing_job_titles_peviitor}\\n\\n\"\n        else:\n            if len(missing_job_titles) > 20:\n                missing_job_titles = f\"{missing_job_titles[:5]} and many more\"\n    \n            print(f\"Expected Results: {job_titles_scraper}\\n\")\n            print(f\"Actual Results: {job_titles_peviitor}\")\n>           assert job_titles_scraper == job_titles_peviitor, f\"Peviitor is missing the following job titles: {missing_job_titles}\\n\\n\"\nE           AssertionError: Peviitor is missing the following job titles: ['Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova']\nE             \nE             \nE           assert ['Beauty Advi... - VIVO CLUJ'] == ['Beauty Advi... - VIVO CLUJ']\nE             At index 2 diff: 'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova' != 'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti'\nE             Full diff:\nE               [\nE                'Beauty Adviser Full Time (8h/zi) - Palas, Iasi',\nE                'Beauty Adviser Part Time (6h/zi) - Baneasa, Bucuresti',\nE             -  'Beauty Adviser Part Time (6h/zi) - Promenada, Bucuresti',\nE             ?                                      ^  ^ ----------  ^^\nE             +  'Beauty Adviser Part Time (6h/zi) - Electroputere, Craiova',\nE             ?                                      ^^^^^  ^^^   ^^^^^ +++\nE                'DIRECTOR ADJUNCT MAGAZIN - TARGU MURES',\nE                'STORE MANAGER - VIVO CLUJ',\nE               ]\n\ntests/test_api.py:79: AssertionError"}, "attachments": [{"name": "stdout", "source": "30799ca7-2029-4969-a2eb-eddcf118db46-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "scraper_class", "value": "<class 'sites.sephora.sephoraScraper'>"}], "start": 1703177642053, "stop": 1703177642054, "uuid": "7b12e0ac-5ebc-4f6a-9a77-b0e77cc15187", "historyId": "8130419d4d3526ea306495d95bbc6e26", "testCaseId": "c080507e0e859c453fd919081af4356d", "fullName": "tests.test_api.TestScrapers#test_scrapers_title", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_tests')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestScrapers"}, {"name": "host", "value": "fv-az1379-978"}, {"name": "thread", "value": "2180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}