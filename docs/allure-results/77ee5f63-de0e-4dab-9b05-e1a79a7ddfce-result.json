{"name": "test_scrapers_city[sephoraScraper]", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra jobs cities\n  \n  \nassert [['Bucuresti'...Targu-Mures']] == [['Bucuresti'...Targu-Mures']]\n  At index 1 diff: ['Cluj-Napoca'] != ['Bucuresti']\n  Full diff:\n  - [['Bucuresti'], ['Bucuresti'], ['Cluj-Napoca'], ['Iasi'], ['Targu-Mures']]\n  ?                ---------------\n  + [['Bucuresti'], ['Cluj-Napoca'], ['Craiova'], ['Iasi'], ['Targu-Mures']]\n  ?                                  +++++++++++++", "trace": "self = <test_api.TestScrapers object at 0x7f5348f5c880>\nsetup_tests = <test_api.SetupTests object at 0x7f5348dc4250>\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_scrapers_city(self, setup_tests):\n        print(f\"Validate job cities from the company website against Peviitor API Response\\n\")\n    \n        print(\"Step 1: Get job cities from the scraper\")\n        job_cities_scraper = sorted(setup_tests.scraped_jobs_data[1])\n    \n        print(\"Step 2: Get job cities from the Peviitor API\")\n        job_cities_peviitor = sorted(setup_tests.peviitor_jobs_data[1])\n    \n        print(\"Step 3: Compare of job titles from scraper response against Peviitor API Response\\n\")\n        print(f\"Expected Results: {job_cities_scraper}\\n\")\n        print(f\"Actual Results: {job_cities_peviitor}\")\n    \n        if job_cities_scraper != job_cities_peviitor:\n>           assert job_cities_scraper == job_cities_peviitor, f\"Peviitor is having extra jobs cities\\n\\n\"\nE           AssertionError: Peviitor is having extra jobs cities\nE             \nE             \nE           assert [['Bucuresti'...Targu-Mures']] == [['Bucuresti'...Targu-Mures']]\nE             At index 1 diff: ['Cluj-Napoca'] != ['Bucuresti']\nE             Full diff:\nE             - [['Bucuresti'], ['Bucuresti'], ['Cluj-Napoca'], ['Iasi'], ['Targu-Mures']]\nE             ?                ---------------\nE             + [['Bucuresti'], ['Cluj-Napoca'], ['Craiova'], ['Iasi'], ['Targu-Mures']]\nE             ?                                  +++++++++++++\n\ntests/test_api.py:98: AssertionError"}, "attachments": [{"name": "stdout", "source": "da66a899-a7db-4b6d-ab06-0bff64fff21d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "scraper_class", "value": "<class 'sites.sephora.sephoraScraper'>"}], "start": 1703177642062, "stop": 1703177642062, "uuid": "3ca386b4-7819-417f-a2e8-2f1b209b10c7", "historyId": "208347018728b29ca6a27314c7a516ae", "testCaseId": "de858b72cb7dd414b6682dd3b0adb884", "fullName": "tests.test_api.TestScrapers#test_scrapers_city", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_tests')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestScrapers"}, {"name": "host", "value": "fv-az1379-978"}, {"name": "thread", "value": "2180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}