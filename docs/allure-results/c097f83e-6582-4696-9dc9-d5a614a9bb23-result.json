{"name": "Test job cities from the ensemblesoftware website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Scraper is not grabbing any job cities", "trace": "get_job_details = (([], [], [], [], []), (['Full-Stack Developer', 'Backend Developer'], [['Baia Mare', 'Brasov', 'Cluj-Napoca'], ['Baia.../www.ensemblesoftware.ro//careers/backend-developer'], ['ensemblesoftware', 'ensemblesoftware'], ['remote', 'remote']))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_ensemblesoftware_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities and titles from the scraper\"):\n            job_cities_scraper = scraped_jobs_data[1]\n            job_titles_scraper = scraped_jobs_data[0]\n    \n        with allure.step(\"Step 2: Get job cities and titles from the Peviitor API\"):\n            job_cities_peviitor = peviitor_jobs_data[1]\n            job_titles_peviitor = peviitor_jobs_data[0]\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_ensemblesoftware.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f72b46d56f0>, expected_cities = []\nactual_cities = [['Baia Mare', 'Brasov', 'Cluj-Napoca'], ['Baia Mare', 'Brasov', 'Cluj-Napoca']]\njob_titles_scraper = []\napi_job_titles = ['Full-Stack Developer', 'Backend Developer']\n\n    def check_job_cities(self, expected_cities, actual_cities, job_titles_scraper, api_job_titles):\n        if not expected_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n>           raise AssertionError(msg)\nE           AssertionError: Scraper is not grabbing any job cities\n\ntests/utils.py:131: AssertionError"}, "steps": [{"name": "Step 1: Get job cities and titles from the scraper", "status": "passed", "start": 1718428419628, "stop": 1718428419628}, {"name": "Step 2: Get job cities and titles from the Peviitor API", "status": "passed", "start": 1718428419628, "stop": 1718428419628}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Scraper is not grabbing any job cities\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_ensemblesoftware.py\", line 56, in test_ensemblesoftware_city_api\n    TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 131, in check_job_cities\n    raise AssertionError(msg)\n"}, "attachments": [{"name": "Expected Results", "source": "adc1318f-e297-494b-be49-027c3342a2c2-attachment.attach"}, {"name": "Actual Results", "source": "275c2930-d367-47cf-bad4-5cf4727f9286-attachment.attach"}], "start": 1718428419628, "stop": 1718428419628}], "start": 1718428419628, "stop": 1718428419629, "uuid": "08c9e02a-a7de-4a39-81b4-d541a58de13f", "historyId": "db8f7fd8283bc6d3f8340ff32ff51a50", "testCaseId": "db8f7fd8283bc6d3f8340ff32ff51a50", "fullName": "Test_API_Suite.test_ensemblesoftware#test_ensemblesoftware_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_ensemblesoftware"}, {"name": "host", "value": "fv-az1772-154"}, {"name": "thread", "value": "2198-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_ensemblesoftware"}]}