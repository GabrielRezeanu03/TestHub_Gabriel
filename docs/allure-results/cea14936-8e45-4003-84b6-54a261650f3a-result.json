{"name": "Test job titles from the ppromania website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Consultant Tehnic Vânzări', 'Consultant Tehnic Vânzări Interne', 'Director General Fabrică', 'Director IT', 'Director Național de Vânzări', 'Director Regional Centru de Servicii', 'Manager Contabilitate și Administrare Personal', 'Manager Financiar Interimar', 'Manager de Comunicare', 'Manager de Producție']", "trace": "get_job_details = ((['Manager Contabilitate și Administrare Personal', 'Manager Financiar Interimar', 'Director Național de Vânzări', 'C...promania', 'ppromania', 'ppromania', 'ppromania'], ['On-site', 'On-site', 'On-site', 'On-site', 'On-site', 'On-site']))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_ppromania_title_api(get_job_details):\n        allure.dynamic.title(f\"Test job titles from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job titles from the scraper\"):\n            job_titles_scraper = sorted(scraped_jobs_data[0])\n    \n        with allure.step(\"Step 2: Get job titles from the Peviitor API\"):\n            job_titles_peviitor = sorted(peviitor_jobs_data[0])\n    \n        with allure.step(\"Step 3: Compare job titles from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_titles_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_titles_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_ppromania.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7fe12d09c8e0>\nexpected_titles = ['Consultant Tehnic Vânzări', 'Consultant Tehnic Vânzări Interne', 'Director General Fabrică', 'Director IT', 'Director Național de Vânzări', 'Director Regional Centru de Servicii', ...]\nactual_titles = ['Contabil cu experiență în SAP', 'Cost Controller', 'Director de Transformare', 'Inginer Service și Suport Tehnic echipamente HVAC', 'Inginer Tehnic Vânzări HVAC', 'Manager de Calitate – industria alimentară']\n\n    def check_job_titles(self, expected_titles, actual_titles):\n        missing_titles = self.get_missing_items(expected_titles, actual_titles)\n    \n        if missing_titles:\n            msg = f\"Peviitor is having extra job titles: {missing_titles}\"\n        else:\n            missing_titles = self.get_missing_items(actual_titles, expected_titles)\n            msg = f\"Peviitor is missing job titles: {missing_titles}\"\n    \n        if not expected_titles and not actual_titles:\n            msg = f\"Scraper is not grabbing any job titles\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_titles == actual_titles, msg\nE       AssertionError: Peviitor is having extra job titles: ['Consultant Tehnic Vânzări', 'Consultant Tehnic Vânzări Interne', 'Director General Fabrică', 'Director IT', 'Director Național de Vânzări', 'Director Regional Centru de Servicii', 'Manager Contabilitate și Administrare Personal', 'Manager Financiar Interimar', 'Manager de Comunicare', 'Manager de Producție']\n\ntests/utils.py:124: AssertionError"}, "steps": [{"name": "Step 1: Get job titles from the scraper", "status": "passed", "start": 1718044909702, "stop": 1718044909702}, {"name": "Step 2: Get job titles from the Peviitor API", "status": "passed", "start": 1718044909702, "stop": 1718044909702}, {"name": "Step 3: Compare job titles from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job titles: ['Consultant Tehnic Vânzări', 'Consultant Tehnic Vânzări Interne', 'Director General Fabrică', 'Director IT', 'Director Național de Vânzări', 'Director Regional Centru de Servicii', 'Manager Contabilitate și Administrare Personal', 'Manager Financiar Interimar', 'Manager de Comunicare', 'Manager de Producție']\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_ppromania.py\", line 37, in test_ppromania_title_api\n    TestUtils().check_job_titles(job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 124, in check_job_titles\n    assert expected_titles == actual_titles, msg\n"}, "attachments": [{"name": "Expected Results", "source": "4f05816a-2ca4-4f33-afe7-65aea67fe0a2-attachment.attach"}, {"name": "Actual Results", "source": "eec51ab0-96b8-44fa-96da-c3d1ce134b29-attachment.attach"}], "start": 1718044909702, "stop": 1718044909702}], "attachments": [{"name": "stderr", "source": "f6a020b9-eb07-47d8-8d69-fd43766eab8c-attachment.txt", "type": "text/plain"}], "start": 1718044909701, "stop": 1718044909702, "uuid": "89548f61-accf-4d87-80f4-be998d6197f7", "historyId": "97dac65ab38c269221beae272a42c0f7", "testCaseId": "97dac65ab38c269221beae272a42c0f7", "fullName": "Test_API_Suite.test_ppromania#test_ppromania_title_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_ppromania"}, {"name": "host", "value": "fv-az886-53"}, {"name": "thread", "value": "2158-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_ppromania"}]}