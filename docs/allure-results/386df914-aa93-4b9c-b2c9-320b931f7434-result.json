{"name": "Test job cities from the britishcouncil website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities: [['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi']]", "trace": "get_job_details = ((['Sales Team Assistant', 'Business Pursuit Coordinator', 'Hourly-paid teacher 1', 'Sales & Customer Services Branch ...riere#4', 'https://www.britishcouncil.ro/despre-noi/cariere#5', 'https://www.britishcouncil.ro/despre-noi/cariere#6']))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_britishcouncil_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities from the scraper\"):\n            job_cities_scraper = sorted(scraped_jobs_data[1])\n    \n        with allure.step(\"Step 2: Get job cities from the Peviitor API\"):\n            job_cities_peviitor = sorted(peviitor_jobs_data[1])\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor)\n\ntests/Test_API_Suite/test_britishcouncil.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f043acd89d0>\nexpected_cities = [['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', '...isoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi']]\nactual_cities = [['București', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['București', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['București', '...isoara', 'Iasi'], ['București', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['București', 'Cluj-Napoca', 'Timisoara', 'Iasi']]\n\n    def check_job_cities(self, expected_cities, actual_cities):\n        missing_cities = self.get_missing_items(expected_cities, actual_cities)\n    \n        if missing_cities:\n            msg = f\"Peviitor is having extra job cities: {missing_cities}\"\n        else:\n            missing_cities = self.get_missing_items(actual_cities, expected_cities)\n            msg = f\"Peviitor is missing job cities: {missing_cities}\"\n    \n        if not expected_cities and not actual_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_cities == actual_cities, msg\nE       AssertionError: Peviitor is having extra job cities: [['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi']]\n\ntests/utils.py:114: AssertionError"}, "steps": [{"name": "Step 1: Get job cities from the scraper", "status": "passed", "start": 1710997769970, "stop": 1710997769970}, {"name": "Step 2: Get job cities from the Peviitor API", "status": "passed", "start": 1710997769970, "stop": 1710997769970}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having extra job cities: [['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi'], ['Bucuresti', 'Cluj-Napoca', 'Timisoara', 'Iasi']]\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/Test_API_Suite/test_britishcouncil.py\", line 53, in test_britishcouncil_city_api\n    TestUtils().check_job_cities(job_cities_scraper, job_cities_peviitor)\n  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/utils.py\", line 114, in check_job_cities\n    assert expected_cities == actual_cities, msg\n"}, "attachments": [{"name": "Expected Results", "source": "c712ddd9-77a8-4b34-8f2a-7efe5ee7fe05-attachment.attach"}, {"name": "Actual Results", "source": "73b6772a-7273-4a31-b0f0-3db6b67d9e3d-attachment.attach"}], "start": 1710997769970, "stop": 1710997769970}], "start": 1710997769970, "stop": 1710997769970, "uuid": "900141f2-a816-4c25-8d31-8504547f3169", "historyId": "9f96585b1c12d78218eed1334eb3e8b2", "testCaseId": "9f96585b1c12d78218eed1334eb3e8b2", "fullName": "Test_API_Suite.test_britishcouncil#test_britishcouncil_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_britishcouncil"}, {"name": "host", "value": "fv-az1500-456"}, {"name": "thread", "value": "2133-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_britishcouncil"}]}