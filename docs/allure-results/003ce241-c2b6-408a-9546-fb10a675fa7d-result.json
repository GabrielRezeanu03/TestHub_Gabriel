{"name": "Test job titles from the affidearomania website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is missing the following job titles: ['Asistent medical radiologie si imagistica - Bucuresti, Cluj']\n  \n  \nassert ['ASISTENT ME... Brasov', ...] == ['ASISTENT ME...Manager', ...]\n  At index 3 diff: 'Asistent medical radiologie si imagistica - Bucuresti, Cluj' != 'Candidatura spontanta la Affidea - Medici, Tehnicieni radiologie-imagistica, Asistenti'\n  Left contains one more item: 'Senior M&A Manager'\n  Full diff:\n    [\n     'ASISTENT MEDICAL/ REGISTRATOR MEDICAL (Timisoara, Focsani)',\n     'Angajari deschidere Clinica, Bucuresti',\n     'Asistent medical generalist ( Complexul Rezidential Cosmopolis)',\n  +  'Asistent medical radiologie si imagistica - Bucuresti, Cluj',\n     'Candidatura spontanta la Affidea - Medici, Tehnicieni radiologie-imagistica, '\n     'Asistenti',\n     'Consultant Relatii Clienti in domeniul medical (Contact Center) - Brasov',\n     'Controlling Finance Manager',\n     'Financial Analyst',\n     'Medici specialisti/primari',\n     'Patient Advisor / Registrator Medical - Brasov',\n     'Patient Advisor / Registrator Medical - Bucuresti, Cluj',\n     'Patient Advisor / Registrator Medical - Oradea',\n     'Personal curatenie - Bucuresti, Timisoara',\n     'Senior M&A Manager',\n    ]", "trace": "self = <test_api.TestScrapers object at 0x7f046087a710>\nsetup_tests = <test_api.SetupTests object at 0x7f045bcb5e10>\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_scrapers_title(self, setup_tests):\n    \n        # Dynamically set the title with the company name\n        company_name = setup_tests.scraper_data[1]\n        allure.dynamic.title(f\"Test job titles from the {company_name} website against Peviitor API Response\")\n    \n        with allure.step(\"Step 1: Get job titles from the scraper\"):\n            job_titles_scraper = sorted(setup_tests.scraped_jobs_data[0])\n    \n        with allure.step(\"Step 2: Get job titles from the Peviitor API\"):\n            job_titles_peviitor = sorted(setup_tests.peviitor_jobs_data[0])\n    \n        missing_job_titles = []\n        # Itterate over job titles and if not present on peviitor add to missing job title list\n        for job_title in job_titles_scraper:\n            if job_title not in job_titles_peviitor:\n                missing_job_titles.append(job_title)\n    \n        with allure.step(\"Step 3: Compare job titles from scraper response against Peviitor API Response\"):\n            # If the missing job list is empty it might mean there are more jobs on peviitor than needed\n            if missing_job_titles == []:\n                missing_job_titles_peviitor = []\n                for job_title in job_titles_peviitor:\n                    if job_title not in job_titles_scraper:\n                        missing_job_titles_peviitor.append(job_title)\n    \n                # If there are way too many jobs titles only list a couple of them\n                if len(missing_job_titles_peviitor) > 20:\n                    missing_job_titles_peviitor = f\"{missing_job_titles_peviitor[:5]} and many more\"\n    \n                print(f\"Expected Results: {job_titles_scraper}\\n\")\n                print(f\"Actual Results: {job_titles_peviitor}\")\n                assert job_titles_scraper == job_titles_peviitor, f\"Peviitor is having the following extra jobs titles: {missing_job_titles_peviitor}\\n\\n\"\n            else:\n                if len(missing_job_titles) > 20:\n                    missing_job_titles = f\"{missing_job_titles[:5]} and many more\"\n    \n                print(f\"Expected Results: {job_titles_scraper}\\n\")\n                print(f\"Actual Results: {job_titles_peviitor}\")\n>               assert job_titles_scraper == job_titles_peviitor, f\"Peviitor is missing the following job titles: {missing_job_titles}\\n\\n\"\nE               AssertionError: Peviitor is missing the following job titles: ['Asistent medical radiologie si imagistica - Bucuresti, Cluj']\nE                 \nE                 \nE               assert ['ASISTENT ME... Brasov', ...] == ['ASISTENT ME...Manager', ...]\nE                 At index 3 diff: 'Asistent medical radiologie si imagistica - Bucuresti, Cluj' != 'Candidatura spontanta la Affidea - Medici, Tehnicieni radiologie-imagistica, Asistenti'\nE                 Left contains one more item: 'Senior M&A Manager'\nE                 Full diff:\nE                   [\nE                    'ASISTENT MEDICAL/ REGISTRATOR MEDICAL (Timisoara, Focsani)',\nE                    'Angajari deschidere Clinica, Bucuresti',\nE                    'Asistent medical generalist ( Complexul Rezidential Cosmopolis)',\nE                 +  'Asistent medical radiologie si imagistica - Bucuresti, Cluj',\nE                    'Candidatura spontanta la Affidea - Medici, Tehnicieni radiologie-imagistica, '\nE                    'Asistenti',\nE                    'Consultant Relatii Clienti in domeniul medical (Contact Center) - Brasov',\nE                    'Controlling Finance Manager',\nE                    'Financial Analyst',\nE                    'Medici specialisti/primari',\nE                    'Patient Advisor / Registrator Medical - Brasov',\nE                    'Patient Advisor / Registrator Medical - Bucuresti, Cluj',\nE                    'Patient Advisor / Registrator Medical - Oradea',\nE                    'Personal curatenie - Bucuresti, Timisoara',\nE                    'Senior M&A Manager',\nE                   ]\n\ntests/test_api.py:93: AssertionError"}, "steps": [{"name": "Step 1: Get job titles from the scraper", "status": "passed", "start": 1703912952748, "stop": 1703912952748}, {"name": "Step 2: Get job titles from the Peviitor API", "status": "passed", "start": 1703912952748, "stop": 1703912952748}, {"name": "Step 3: Compare job titles from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is missing the following job titles: ['Asistent medical radiologie si imagistica - Bucuresti, Cluj']\n  \n  \nassert ['ASISTENT ME... Brasov', ...] == ['ASISTENT ME...Manager', ...]\n  At index 3 diff: 'Asistent medical radiologie si imagistica - Bucuresti, Cluj' != 'Candidatura spontanta la Affidea - Medici, Tehnicieni radiologie-imagistica, Asistenti'\n  Left contains one more item: 'Senior M&A Manager'\n  Full diff:\n    [\n     'ASISTENT MEDICAL/ REGISTRATOR MEDICAL (Timisoara, Focsani)',\n     'Angajari deschidere Clinica, Bucuresti',\n     'Asistent medical generalist ( Complexul Rezidential Cosmopolis)',\n  +  'Asistent medical radiologie si imagistica - Bucuresti, Cluj',\n     'Candidatura spontanta la Affidea - Medici, Tehnicieni radiologie-imagistica, '\n     'Asistenti',\n     'Consultant Relatii Clienti in domeniul medical (Contact Center) - Brasov',\n     'Controlling Finance Manager',\n     'Financial Analyst',\n     'Medici specialisti/primari',\n     'Patient Advisor / Registrator Medical - Brasov',\n     'Patient Advisor / Registrator Medical - Bucuresti, Cluj',\n     'Patient Advisor / Registrator Medical - Oradea',\n     'Personal curatenie - Bucuresti, Timisoara',\n     'Senior M&A Manager',\n    ]\n", "trace": "  File \"/home/runner/work/RaresTestHub/RaresTestHub/tests/test_api.py\", line 93, in test_scrapers_title\n    assert job_titles_scraper == job_titles_peviitor, f\"Peviitor is missing the following job titles: {missing_job_titles}\\n\\n\"\n"}, "start": 1703912952748, "stop": 1703912952748}], "attachments": [{"name": "stdout", "source": "81daf52e-b34e-410e-bebd-845a76ad5672-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "scraper_class", "value": "<class 'sites.affidearomania.affidearomaniaScraper'>"}], "start": 1703912952748, "stop": 1703912952749, "uuid": "e24b456e-cbac-4533-91ff-e5d42f1bf0f0", "historyId": "d9a98e5357aa566494547f4e5357e829", "testCaseId": "4b62ec59580b850c2662da4323212e24", "fullName": "test_api.TestScrapers#test_scrapers_title", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestScrapers"}, {"name": "host", "value": "fv-az1023-676"}, {"name": "thread", "value": "1934-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_api"}]}